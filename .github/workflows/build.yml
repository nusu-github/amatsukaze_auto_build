name: Amatsukaze_auto_build

on: [push]

env:
  CONFIGURATION: Release
  PLATFORM: x64
  PLATFORM_VERSION: 10
  PLATFORM_TOOLSET: v142

# ジョブ名や順番のわかりやすいメモは、build-memo.mdを参照

jobs:
  # MinGW

  MinGW-no_dep-group_a:
    runs-on: windows-latest

    env:
      CFLAGS: -O3 -march=x86-64-v3 -mthreads -mvzeroupper -fintegrated-as -fintegrated-cc1 -rtlib=compiler-rt -flto=thin
      CXXFLAGS: -O3 -march=x86-64-v3 -mthreads -mvzeroupper -fintegrated-as -fintegrated-cc1 -rtlib=compiler-rt -flto=thin -stdlib=libc++
      LDFLAGS: -static -unwindlib=libunwind

    steps:
      - uses: actions/checkout@v3

      # MSYS2 セットアップ
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: clang64
          pacboy: >-
            git:
            autotools:p
            toolchain:p
            cmake:p
            ninja:p
            nasm:p

      ## x265 ビルド
      - name: x265 build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        shell: msys2 {0}
        run: |
          git clone -j2 https://bitbucket.org/multicoreware/x265_git.git
          cd x265_git/build/msys
          cmake -G "Ninja" -S ../../source -B 12bit -DCMAKE_BUILD_TYPE=Release -DHIGH_BIT_DEPTH=ON -DEXPORT_C_API=OFF -DENABLE_SHARED=OFF -DENABLE_CLI=OFF -DMAIN12=ON -DCMAKE_ASM_NASM_FLAGS=-w-macro-params-legacy
          cmake -G "Ninja" -S ../../source -B 10bit -DCMAKE_BUILD_TYPE=Release -DHIGH_BIT_DEPTH=ON -DEXPORT_C_API=OFF -DENABLE_SHARED=OFF -DENABLE_CLI=OFF -DCMAKE_ASM_NASM_FLAGS=-w-macro-params-legacy
          cmake -G "Ninja" -S ../../source -B main -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/clang64 -DEXTRA_LIB="libx265_main12.a;libx265_main10.a" -DLINKED_10BIT=ON -DLINKED_12BIT=ON -DCMAKE_ASM_NASM_FLAGS=-w-macro-params-legacy
          cmake --build 12bit
          cmake --build 10bit
          cp 12bit/libx265.a /clang64/lib/libx265_main12.a
          cp 10bit/libx265.a /clang64/lib/libx265_main10.a
          cmake --build main
          cp main/libx265.a /clang64/lib/libx265_main.a
          cp /clang64/lib/libx265_main12.a libx265_main12.a
          cp /clang64/lib/libx265_main10.a libx265_main10.a
          cp /clang64/lib/libx265_main.a libx265_main.a
          llvm-ar -M <<EOF
          CREATE main/libx265.a
          ADDLIB libx265_main.a
          ADDLIB libx265_main10.a
          ADDLIB libx265_main12.a
          SAVE
          END
          EOF
          cmake --install main

      # ビルド成果物を圧縮
      - name: Compress build artifact
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          tar -cvf MinGW-no_dep-group_a.tar `
            x265_git/build/msys/main/x265.exe

      # ビルド成果物をアップロード
      - name: upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: MinGW-no_dep-group_a
          path: MinGW-no_dep-group_a.tar

  MinGW-no_dep-group_b:
    runs-on: windows-latest

    env:
      CFLAGS: -pipe -O3 -march=x86-64-v3 -mthreads -mtls-dialect=gnu2 -mvzeroupper -minline-all-stringops -minline-stringops-dynamically
      CXXFLAGS: -pipe -O3 -march=x86-64-v3 -mthreads -mtls-dialect=gnu2 -mvzeroupper -minline-all-stringops -minline-stringops-dynamically
      LDFLAGS: -static

    steps:
      - uses: actions/checkout@v3

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: mingw64
          pacboy: >-
            git:
            autotools:p
            toolchain:p
            cmake:p
            ninja:p
            nasm:p

      ## yadifmod2 ビルド
      - name: yadifmod2 build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git clone --depth 1 https://github.com/Asd-g/yadifmod2.git
          cd yadifmod2
          git clone --depth=1 https://github.com/AviSynth/AviSynthPlus.git
          xcopy AviSynthPlus\avs_core\include\* src /Y /E
          cmake -G "Ninja" -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build
          mv build/libyadifmod2.0.2.7.dll build/yadifmod2.dll

      ## masktools ビルド
      - name: masktools build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git clone --depth=1 https://github.com/pinterf/masktools.git
          cd masktools
          cmake -G "Ninja" -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build

      ## mvtools ビルド
      - name: mvtools build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git clone --depth=1 https://github.com/pinterf/mvtools.git
          cd mvtools
          cmake -G "Ninja" -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build

      ## RgTools ビルド
      - name: RgTools build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git clone --depth=1 https://github.com/pinterf/RgTools.git
          cd RgTools
          cmake -G "Ninja" -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build

      # ビルド成果物を圧縮
      - name: Compress build artifact
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          tar -cvf MinGW-no_dep-group_b.tar `
            yadifmod2/build/yadifmod2.dll `
            masktools/build/masktools/masktools2.dll `
            mvtools/build/Sources/MvTools2.dll `
            RgTools/build/RgTools/RgTools.dll

      # ビルド成果物をアップロード
      - name: upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: MinGW-no_dep-group_b
          path: MinGW-no_dep-group_b.tar

  MinGW-yes_dep-group_a:
    runs-on: windows-latest

    env:
      CFLAGS: -O3 -march=x86-64-v3 -mthreads -mvzeroupper -fintegrated-as -fintegrated-cc1 -rtlib=compiler-rt -flto=thin
      CXXFLAGS: -O3 -march=x86-64-v3 -mthreads -mvzeroupper -fintegrated-as -fintegrated-cc1 -rtlib=compiler-rt -flto=thin -stdlib=libc++
      LDFLAGS: -static -unwindlib=libunwind

    steps:
      - uses: actions/checkout@v3

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: clang64
          pacboy: >-
            git:
            autotools:p
            toolchain:p
            cmake:p
            ninja:p
            nasm:p

      ## l-smash ビルド
      - name: l-smash build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        shell: msys2 {0}
        run: |
          git clone https://github.com/rigaya/l-smash.git -b add_ver_info
          cd l-smash
          ./configure --prefix=/clang64 --target-os=mingw --extra-cflags="${CFLAGS}" --extra-ldflags="${LDFLAGS}"
          make -j$(nproc) install

      ## x264 ビルド
      - name: x264 build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        shell: msys2 {0}
        run: |
          git clone https://github.com/jpsdr/x264.git
          cd x264
          ./configure --prefix=/clang64 --enable-strip --extra-cflags="${CFLAGS}" --extra-ldflags="${LDFLAGS}"
          make -j$(nproc) install

      # ビルド成果物を圧縮
      - name: Compress build artifact
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          tar -cvf MinGW-yes_dep-group_a.tar `
            l-smash/cli/*.exe `
            x264/x264.exe

      # ビルド成果物をアップロード
      - name: upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: MinGW-yes_dep-group_a
          path: MinGW-yes_dep-group_a.tar

  MinGW-yes_dep-group_b:
    runs-on: windows-latest

    env:
      CFLAGS: -pipe -O3 -march=x86-64-v3 -mthreads -mtls-dialect=gnu2 -mvzeroupper -minline-all-stringops -minline-stringops-dynamically
      CXXFLAGS: -pipe -O3 -march=x86-64-v3 -mthreads -mtls-dialect=gnu2 -mvzeroupper -minline-all-stringops -minline-stringops-dynamically

    steps:
      - uses: actions/checkout@v3

      # MSYS2 セットアップ
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: mingw64
          pacboy: >-
            git:
            autotools:p
            toolchain:p
            nasm:p

      ## Gitのグローバルコンフィグを設定
      - name: Git global-config Set
        working-directory: ${{env.GITHUB_WORKSPACE}}
        shell: msys2 {0}
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      ## nv-codec-headers インストール
      - name: nv-codec-headers build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        shell: msys2 {0}
        run: |
          git clone https://github.com/FFmpeg/nv-codec-headers.git --depth 1
          cd nv-codec-headers
          make install PREFIX=/mingw64

      ## mfx_dispatch ビルド
      - name: mfx_dispatch build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        shell: msys2 {0}
        run: |
          git clone https://github.com/lu-zero/mfx_dispatch.git --depth 1
          cd mfx_dispatch
          autoreconf -fiv
          ./configure --prefix=/mingw64
          make -j$(nproc) install

      ## FFmpeg ビルド
      - name: FFmpeg build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        shell: msys2 {0}
        env:
          LDFLAGS: -static
        run: |
          git clone https://github.com/FFmpeg/FFmpeg.git -b release/4.3 --depth=1
          cd FFmpeg
          git am ../patch/0001-mpeg2dec-add-DC-table.patch
          ./configure \
            --prefix=output --target-os=mingw64 --arch=x86_64 --enable-shared \
            --extra-cflags="${CFLAGS}" --extra-cxxflags="${CXXFLAGS}" --extra-ldflags="${LDFLAGS}" \
            --enable-avresample --enable-libmfx --enable-nvdec \
            --disable-network --disable-programs --disable-doc --disable-debug
          make -j$(nproc) install
          cd output/lib
          rename .dll.a .a *.dll.a

      # ビルド成果物を圧縮
      - name: Compress build artifact
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          tar -cvf MinGW-yes_dep-group_b.tar `
            FFmpeg/output

      # ビルド成果物をアップロード
      - name: upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: MinGW-yes_dep-group_b
          path: MinGW-yes_dep-group_b.tar

  # MSVC

  MSVC-no_dep-group_a:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      # MSBuild パス追加
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.3
        with:
          msbuild-architecture: ${{env.PLATFORM}}

      ## join_logo_scp ビルド
      - name: join_logo_scp build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git clone --depth=1 https://github.com/yobibi/join_logo_scp.git
          cd join_logo_scp\src
          msbuild join_logo_scp.sln /m /t:rebuild /p:Configuration=${{env.CONFIGURATION}} /p:Platform=${{env.PLATFORM}} /p:WindowsTargetPlatformVersion=${{env.PLATFORM_VERSION}} /p:PlatformToolset=${{env.PLATFORM_TOOLSET}}

      ## chapter_exe ビルド
      - name: chapter_exe build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git clone --depth=1 https://github.com/nekopanda/chapter_exe.git
          cd chapter_exe\src
          msbuild chapter_exe.sln /m /t:rebuild /p:Configuration=${{env.CONFIGURATION}} /p:Platform=${{env.PLATFORM}} /p:WindowsTargetPlatformVersion=${{env.PLATFORM_VERSION}} /p:PlatformToolset=${{env.PLATFORM_TOOLSET}}

      ## MP4Box ビルド
      - name: MP4Box build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        env:
          CONFIGURATION: Release - MP4Box_only
        run: |
          git clone --recurse-submodules --remote-submodules https://github.com/gpac/gpac.git
          cd gpac\build\msvc14
          msbuild gpac.sln /m /t:rebuild /p:Configuration="${{env.CONFIGURATION}}" /p:Platform=${{env.PLATFORM}} /p:WindowsTargetPlatformVersion=${{env.PLATFORM_VERSION}} /p:PlatformToolset=${{env.PLATFORM_TOOLSET}}

      ## Amatsukaze NicoJK18Client ビルド
      - name: Amatsukaze NicoJK18Client build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git clone --depth 1 --recurse-submodules --shallow-submodules --remote-submodules https://github.com/nekopanda/Amatsukaze.git Amatsukaze_nicojk18 -b nicojk18
          cd Amatsukaze_nicojk18
          msbuild Amatsukaze.sln /m /t:restore /t:NicoJK18Client:rebuild /p:Configuration=${{env.CONFIGURATION}} /p:Platform=${{env.PLATFORM}} /p:WindowsTargetPlatformVersion=${{env.PLATFORM_VERSION}} /p:PlatformToolset=${{env.PLATFORM_TOOLSET}}

      # ビルド成果物を圧縮
      - name: Compress build artifact
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          tar -cvf MSVC-no_dep-group_a.tar `
            join_logo_scp/src/x64/Release/join_logo_scp.exe `
            chapter_exe/src/x64/Release/chapter_exe.exe `
            "gpac/bin/x64/Release - MP4Box_only/mp4box.exe" `
            Amatsukaze_nicojk18/x64/Release/*.exe

      # ビルド成果物をアップロード
      - name: upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: MSVC-no_dep-group_a
          path: MSVC-no_dep-group_a.tar

  MSVC-no_dep-group_b:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      ## Gitのグローバルコンフィグを設定
      - name: Git global-config Set
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      # MSBuild パス追加
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.3
        with:
          msbuild-architecture: ${{env.PLATFORM}}

      ## TIVTC ビルド
      - name: TIVTC build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git clone https://github.com/pinterf/TIVTC.git --depth 1
          cd TIVTC\src
          msbuild TIVTC.sln /m /t:rebuild /p:Configuration=${{env.CONFIGURATION}} /p:Platform=${{env.PLATFORM}} /p:WindowsTargetPlatformVersion=${{env.PLATFORM_VERSION}} /p:PlatformToolset=${{env.PLATFORM_TOOLSET}}

      ## D3DVP ビルド
      - name: D3DVP build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git clone --depth 1 --recurse-submodules --shallow-submodules --remote-submodules https://github.com/nusu-github/D3DVP.git
          cd D3DVP
          msbuild D3DVP.sln /m /t:D3DVP:rebuild /p:Configuration=${{env.CONFIGURATION}} /p:Platform=${{env.PLATFORM}} /p:WindowsTargetPlatformVersion=${{env.PLATFORM_VERSION}} /p:PlatformToolset=${{env.PLATFORM_TOOLSET}}

      ## NNEDI3 ビルド
      - name: NNEDI3 build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git clone --depth 1 https://github.com/jpsdr/NNEDI3.git
          cd NNEDI3
          git am ..\patch\0001-asm_FMA_x64-enable.patch
          msbuild NNEDI3.sln /m /t:rebuild /p:Configuration=${{env.CONFIGURATION}} /p:Platform=${{env.PLATFORM}} /p:WindowsTargetPlatformVersion=${{env.PLATFORM_VERSION}} /p:PlatformToolset=${{env.PLATFORM_TOOLSET}}

      # ビルド成果物を圧縮
      - name: Compress build artifact
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          tar -cvf MSVC-no_dep-group_b.tar `
            TIVTC/src/TIVTC/x64/Release/TIVTC.dll `
            D3DVP/x64/Release/D3DVP.dll `
            NNEDI3\x64\Release\nnedi3.dll

      # ビルド成果物をアップロード
      - name: upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: MSVC-no_dep-group_b
          path: MSVC-no_dep-group_b.tar

  MSVC-yes_dep-group_a:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3

      # perl セットアップ
      - name: Setup perl
        uses: shogo82148/actions-setup-perl@v1.16.2
        with:
          distribution: strawberry

      # Developer Command Prompt有効化
      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1.12.1

      # vcpkg セットアップ
      - name: Setup vcpkg
        run: |
          vcpkg integrate install
          vcpkg install lz4 --triplet x64-windows-static

      ## Ut Video Codec Suite ビルド
      - name: Ut Video Codec Suite build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git clone --depth=1 https://github.com/umezawatakeshi/utvideo.git
          cd utvideo
          msbuild utvideo.sln /m /t:utv_core:rebuild /p:Configuration=${{env.CONFIGURATION}} /p:Platform=${{env.PLATFORM}} /p:WindowsTargetPlatformVersion=${{env.PLATFORM_VERSION}} /p:PostBuildEventUseInBuild=false

      ## OpenSSL ビルド
      - name: OpenSSL build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git clone --depth=1 https://github.com/openssl/openssl.git -b OpenSSL_1_0_2-stable
          cd openssl
          perl Configure VC-WIN64A
          cmd /c .\ms\do_win64a
          nmake /S /f ms\ntdll.mak

      # ビルド成果物を圧縮
      - name: Compress build artifact
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          tar -cvf MSVC-yes_dep-group_a.tar `
            openssl `
            utvideo/utv_core `
            utvideo/x64/Release

      # ビルド成果物をアップロード
      - name: upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: MSVC-yes_dep-group_a
          path: MSVC-yes_dep-group_a.tar

  MSVC-yes_dep-group_b:
    runs-on: windows-latest
    needs: [MinGW-yes_dep-group_b]
    steps:
      - uses: actions/checkout@v3

      ## Gitのグローバルコンフィグを設定
      - name: Git global-config Set
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      ## ビルド済みの依存関係をダウンロード
      - name: Download all build artifacts
        uses: actions/download-artifact@v3

      ## ファイルを解凍
      - name: Uncompress build artifacts
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          tar -xvf MinGW-yes_dep-group_b/MinGW-yes_dep-group_b.tar

      # MSBuild パス追加
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.3
        with:
          msbuild-architecture: ${{env.PLATFORM}}

      ## zlib-ng ビルド
      - name: zlib-ng build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git clone https://github.com/zlib-ng/zlib-ng.git --depth 1
          cd zlib-ng
          cmake -G "Ninja" -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=true -DZLIB_COMPAT=true -DZLIB_ENABLE_TESTS=false
          cmake --build build

      ## mfx_dispatch ビルド
      - name: mfx_dispatch build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git clone https://github.com/lu-zero/mfx_dispatch.git --depth 1
          cd mfx_dispatch
          cmake -G "Ninja" -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=true
          cmake --build build

      ## L-SMASH ビルド
      - name: L-SMASH build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        env:
          CONFIGURATION: CLIRelease
        run: |
          git clone --depth=1 https://github.com/rigaya/l-smash.git -b add_ver_info
          cd l-smash
          msbuild L-SMASH.sln /m /t:rebuild /p:Configuration=${{env.CONFIGURATION}} /p:Platform=${{env.PLATFORM}} /p:WindowsTargetPlatformVersion=${{env.PLATFORM_VERSION}} /p:PlatformToolset=${{env.PLATFORM_TOOLSET}}

      ## LSMASH Works ビルド
      - name: LSMASH Works build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git clone https://github.com/Mr-Ojii/L-SMASH-Works.git
          mkdir L-SMASH-Works\build64_msvc\lib
          xcopy zlib-ng\build\zlib.lib L-SMASH-Works\build64_msvc\lib /Y
          xcopy mfx_dispatch\build\mfx.lib L-SMASH-Works\build64_msvc\lib /Y
          xcopy l-smash\x64\CLIRelease\liblsmash.lib L-SMASH-Works\build64_msvc\lib /Y
          xcopy l-smash\lsmash.h L-SMASH-Works\include /Y
          xcopy FFmpeg\output\include L-SMASH-Works\include /Y /E
          xcopy FFmpeg\output\lib L-SMASH-Works\build64_msvc\lib /Y
          cd L-SMASH-Works\AviSynth
          git am ..\..\patch\0001-Add-XXH_INLINE_ALL.patch
          msbuild LSMASHSourceVCX.sln /m /t:rebuild /p:Configuration=${{env.CONFIGURATION}} /p:Platform=${{env.PLATFORM}} /p:WindowsTargetPlatformVersion=${{env.PLATFORM_VERSION}} /p:PlatformToolset=${{env.PLATFORM_TOOLSET}}

      # ビルド成果物を圧縮
      - name: Compress build artifact
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          tar -cvf MSVC-yes_dep-group_b.tar `
            L-SMASH-Works\AviSynth\x64\Release\LSMASHSource.dll

      # ビルド成果物をアップロード
      - name: upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: MSVC-yes_dep-group_b
          path: MSVC-yes_dep-group_b.tar

  MSVC-yes_dep-group_c:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3

      # MSBuild パス追加
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.3
        with:
          msbuild-architecture: ${{env.PLATFORM}}

      # CUDA ToolKit セットアップ
      - name: Setup CUDA ToolKit
        uses: Jimver/cuda-toolkit@v0.2.8
        with:
          cuda: "11.7.0"

      ## AviSynthNeo ビルド
      - name: AviSynthNeo build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git clone --depth=1 https://github.com/nekopanda/AviSynthPlus.git
          cd AviSynthPlus
          Get-Content CMakeLists.txt | foreach { $_ -replace 'v141_xp' , 'v142' } | Out-File -Encoding UTF8 CMakeLists.txt.tmp
          xcopy CMakeLists.txt.tmp CMakeLists.txt /Y
          cmake -G "Visual Studio 16 2019" -S . -B build -A x64 -DBUILD_SHARED_LIBS=true -DCMAKE_CONFIGURATION_TYPES=Release
          cmake --build build --config Release --target AvsCore -- /m

      ## AvsCUDA,KTGMC,KNNEDI3,KFM ビルド
      #- name: AvsCUDA,KTGMC,KNNEDI3,KFM build
      #  working-directory: ${{env.GITHUB_WORKSPACE}}
      #  run: |
      #    git clone --depth 1 --recurse-submodules --shallow-submodules --remote-submodules -j2 https://github.com/nekopanda/AviSynthCUDAFilters.git
      #    xcopy AviSynthPlus\build\Output\c_api\AviSynth.lib AviSynthCUDAFilters\lib\x64 /Y
      #    cd AviSynthCUDAFilters
      #    Get-Content AvsCUDA\AvsCUDA.vcxproj | foreach { $_ -replace "CUDA 8.0" , "CUDA 11.7.0" } | foreach { $_ -replace "compute_61,sm_61;compute_35,sm_35" , "compute_35,sm_35;compute_52,sm_52;compute_61,sm_61;compute_75,sm_75;compute_86,sm_86" } | foreach { $_ -replace "<ConformanceMode>true</ConformanceMode>" , "<ConformanceMode>false</ConformanceMode>" } | foreach { $_ -replace '<AdditionalOptions>-Xcompiler "/wd 4819"', '<AdditionalOptions>-std=c++17 -Xcompiler "/std:c++17" -Xcompiler "/wd 4819"' } > AvsCUDA.vcxproj.tmp
      #    Get-Content KFM\KFM.vcxproj | foreach { $_ -replace "CUDA 8.0" , "CUDA 11.7" } | foreach { $_ -replace "compute_61,sm_61;compute_35,sm_35" , "compute_35,sm_35;compute_52,sm_52;compute_61,sm_61;compute_75,sm_75;compute_86,sm_86" } > KFM.vcxproj.tmp
      #    Get-Content KTGMC\KTGMC.vcxproj | foreach { $_ -replace "CUDA 8.0" , "CUDA 11.7" } | foreach { $_ -replace "compute_61,sm_61;compute_35,sm_35" , "compute_35,sm_35;compute_52,sm_52;compute_61,sm_61;compute_75,sm_75;compute_86,sm_86" }  > KTGMC.vcxproj.tmp
      #    Get-Content nnedi3\nnedi3\nnedi3.vcxproj | foreach { $_ -replace "CUDA 8.0" , "CUDA 11.7" } | foreach { $_ -replace "compute_61,sm_61;compute_35,sm_35" , "compute_35,sm_35;compute_52,sm_52;compute_61,sm_61;compute_75,sm_75;compute_86,sm_86" } > nnedi3.vcxproj.tmp
      #    xcopy AvsCUDA.vcxproj.tmp AvsCUDA\AvsCUDA.vcxproj /Y
      #    xcopy KFM.vcxproj.tmp KFM\KFM.vcxproj /Y
      #    xcopy KTGMC.vcxproj.tmp KTGMC\KTGMC.vcxproj /Y
      #    xcopy nnedi3.vcxproj.tmp nnedi3\nnedi3\nnedi3.vcxproj /Y
      #    msbuild AviSynthCUDAFilters.sln /m /t:AvsCUDA:rebuild /t:KTGMC:rebuild /t:KNNEDI3:rebuild /t:KFM:rebuild /t:KUtil:rebuild /p:Configuration=${{env.CONFIGURATION}} /p:Platform=${{env.PLATFORM}} /p:WindowsTargetPlatformVersion=${{env.PLATFORM_VERSION}} /p:PlatformToolset=${{env.PLATFORM_TOOLSET}}

      # ビルド成果物を圧縮
      - name: Compress build artifact
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          tar -cvf MSVC-yes_dep-group_c.tar `
            AviSynthPlus/build/Output `
            AviSynthPlus/avs_core/include

      # ビルド成果物をアップロード
      - name: upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: MSVC-yes_dep-group_c
          path: MSVC-yes_dep-group_c.tar

  MSVC-yes_dep-group_d:
    runs-on: windows-2019
    needs: [MinGW-yes_dep-group_b, MSVC-yes_dep-group_a, MSVC-yes_dep-group_c]
    steps:
      - uses: actions/checkout@v3

      ## ビルド済みの依存関係をダウンロード
      - name: Download all build artifacts
        uses: actions/download-artifact@v3

      ## ファイルを解凍
      - name: Uncompress build artifacts
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          tar -xvf MinGW-yes_dep-group_b/MinGW-yes_dep-group_b.tar
          tar -xvf MSVC-yes_dep-group_a/MSVC-yes_dep-group_a.tar
          tar -xvf MSVC-yes_dep-group_c/MSVC-yes_dep-group_c.tar

      ## Gitのグローバルコンフィグを設定
      - name: Git global-config Set
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git config --global core.autocrlf input

      # Developer Command Prompt有効化
      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1.12.1

      ## Amatsukaze ビルド
      - name: Amatsukaze build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git clone --recurse-submodules --remote-submodules https://github.com/R2Lish/Amatsukaze.git
          mkdir Amatsukaze\lib\x64
          xcopy openssl\out32dll\* Amatsukaze\lib\x64 /Y
          xcopy utvideo\x64\Release\* Amatsukaze\lib\x64 /Y
          xcopy FFmpeg\output\bin\* Amatsukaze\lib\x64 /Y
          xcopy AviSynthPlus\build\Output\c_api\AviSynth.lib Amatsukaze\lib\x64 /Y
          xcopy AviSynthPlus\build\Output\AviSynth.dll Amatsukaze\lib\x64 /Y
          rmdir Amatsukaze\include\lib* -Recurse
          rmdir Amatsukaze\include\openssl -Recurse
          rmdir Amatsukaze\include\avs -Recurse
          rmdir Amatsukaze\include\utvideo -Recurse
          xcopy FFmpeg\output\include\* Amatsukaze\include /Y /E
          xcopy utvideo\utv_core\* Amatsukaze\include\utvideo /Y /E /I
          xcopy openssl\inc32\* Amatsukaze\include /Y /E
          xcopy AviSynthPlus\avs_core\include\* Amatsukaze\include /Y /E
          cd Amatsukaze
          git am ..\patch\0001-bat-file-character-encoding-bug-fixed.patch -3 --keep-cr
          msbuild Amatsukaze.sln /m /t:restore /t:FileCutter:rebuild /t:AmatsukazeCLI:rebuild /t:Caption:rebuild /t:BatchHashChecker:rebuild /t:AmatsukazeAddTask:rebuild /t:AmatsukazeServer:rebuild /t:AmatsukazeServerCLI:rebuild /t:AmatsukazeGUI:rebuild /t:ScriptCommand:rebuild /p:Configuration=${{env.CONFIGURATION}} /p:Platform=${{env.PLATFORM}} /p:WindowsTargetPlatformVersion=${{env.PLATFORM_VERSION}} /p:PlatformToolset=${{env.PLATFORM_TOOLSET}}

      # ビルド成果物を圧縮
      - name: Compress build artifact
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          tar -cvf MSVC-yes_dep-group_d.tar `
            Amatsukaze

      # ビルド成果物をアップロード
      - name: upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: MSVC-yes_dep-group_d
          path: MSVC-yes_dep-group_d.tar

  # other

  other-download:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: QTGMC
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          git clone https://github.com/realfinder/AVS-Stuff.git
          cd AVS-Stuff
          git reset --hard 17c2b46

      - name: SMDegrain
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          curl "https://raw.githubusercontent.com/avisynth-repository/SMDegrain/master/SMDegrain.avsi" -O

      # ビルド成果物を圧縮
      - name: Compress build artifact
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          tar -cvf other-download.tar `
            "AVS-Stuff/avs 2.6 and up/QTGMC.avsi" `
            SMDegrain.avsi

      # ビルド成果物をアップロード
      - name: upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: other-download
          path: other-download.tar

  # packaging

  packaging:
    runs-on: windows-latest
    needs:
      [
        MinGW-no_dep-group_a,
        MinGW-no_dep-group_b,
        MinGW-yes_dep-group_a,
        MinGW-yes_dep-group_b,
        MSVC-no_dep-group_a,
        MSVC-no_dep-group_b,
        MSVC-yes_dep-group_a,
        MSVC-yes_dep-group_b,
        MSVC-yes_dep-group_c,
        MSVC-yes_dep-group_d,
        other-download,
      ]
    steps:
      - uses: actions/checkout@v3

      ## ビルド済みの依存関係をダウンロード
      - name: Download all build artifacts
        uses: actions/download-artifact@v3

      ## ファイルを解凍
      - name: Uncompress build artifacts
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          tar -xvf MinGW-no_dep-group_a/MinGW-no_dep-group_a.tar
          tar -xvf MinGW-no_dep-group_b/MinGW-no_dep-group_b.tar
          tar -xvf MinGW-yes_dep-group_a/MinGW-yes_dep-group_a.tar
          tar -xvf MinGW-yes_dep-group_b/MinGW-yes_dep-group_b.tar
          tar -xvf MSVC-no_dep-group_a/MSVC-no_dep-group_a.tar
          tar -xvf MSVC-no_dep-group_b/MSVC-no_dep-group_b.tar
          tar -xvf MSVC-yes_dep-group_a/MSVC-yes_dep-group_a.tar
          tar -xvf MSVC-yes_dep-group_b/MSVC-yes_dep-group_b.tar
          tar -xvf MSVC-yes_dep-group_c/MSVC-yes_dep-group_c.tar
          tar -xvf MSVC-yes_dep-group_d/MSVC-yes_dep-group_d.tar
          tar -xvf other-download/other-download.tar

      ## ビルド成果物をパッケージ化
      - name: packaging
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          mkdir Amatsukaze_pack
          xcopy join_logo_scp\JL Amatsukaze_pack\JL /Y /E /I
          mkdir Amatsukaze_pack\exe_files
          mkdir Amatsukaze_pack\exe_files\plugins64
          mkdir Amatsukaze_pack\exe_files\cmd
          mkdir Amatsukaze_pack\exe_files\plugins64\AutoSelected
          xcopy l-smash\cli\*.exe Amatsukaze_pack\exe_files /Y
          xcopy join_logo_scp\src\x64\Release\join_logo_scp.exe Amatsukaze_pack\exe_files /Y
          xcopy chapter_exe\src\x64\Release\chapter_exe.exe Amatsukaze_pack\exe_files /Y
          xcopy "gpac\bin\x64\Release - MP4Box_only\mp4box.exe" Amatsukaze_pack\exe_files /Y
          xcopy qaac\vcproject\x64\Release\qaac64.exe Amatsukaze_pack\exe_files /Y
          xcopy L-SMASH-Works\AviSynth\x64\Release\LSMASHSource.dll Amatsukaze_pack\exe_files\plugins64 /Y
          xcopy "AVS-Stuff\avs 2.6 and up\QTGMC.avsi" Amatsukaze_pack\exe_files\plugins64 /Y
          xcopy RgTools\Build\x64\Release\RgTools.dll Amatsukaze_pack\exe_files\plugins64 /Y
          xcopy NNEDI3\x64\Release\nnedi3.dll Amatsukaze_pack\exe_files\plugins64\AutoSelected /Y
          xcopy mvtools\Sources\x64\Release\mvtools2.dll Amatsukaze_pack\exe_files\plugins64 /Y
          xcopy masktools\masktools\build\x64\Build\release-no-boost\masktools2.dll Amatsukaze_pack\exe_files\plugins64 /Y
          xcopy AviSynthCUDAFilters\x64\Release\*.dll Amatsukaze_pack\exe_files\plugins64 /Y
          xcopy AviSynthCUDAFilters\TestScripts\KFMDeint.avsi Amatsukaze_pack\exe_files\plugins64 /Y
          xcopy AviSynthCUDAFilters\TestScripts\KSMDegrain.avsi Amatsukaze_pack\exe_files\plugins64 /Y
          xcopy AviSynthCUDAFilters\TestScripts\KTGMC.avsi Amatsukaze_pack\exe_files\plugins64 /Y
          xcopy SMDegrain.avsi Amatsukaze_pack\exe_files\plugins64 /Y
          xcopy D3DVP\x64\Release\D3DVP.dll Amatsukaze_pack\exe_files\plugins64 /Y
          xcopy yadifmod2\msvc\x64\Release\yadifmod2.dll Amatsukaze_pack\exe_files\plugins64\AutoSelected /Y
          xcopy TIVTC\src\TIVTC\x64\Release\TIVTC.dll Amatsukaze_pack\exe_files\plugins64 /Y
          xcopy Amatsukaze\AmatsukazeAddTask\bin\Release\netcoreapp3.1\*.dll Amatsukaze_pack\exe_files /Y
          xcopy Amatsukaze\AmatsukazeAddTask\bin\Release\netcoreapp3.1\*.exe Amatsukaze_pack\exe_files /Y
          xcopy Amatsukaze\AmatsukazeAddTask\bin\Release\netcoreapp3.1\AmatsukazeAddTask.runtimeconfig.json Amatsukaze_pack\exe_files /Y
          xcopy Amatsukaze\AmatsukazeGUI\bin\Release\netcoreapp3.1\*.dll Amatsukaze_pack\exe_files /Y
          xcopy Amatsukaze\AmatsukazeGUI\bin\Release\netcoreapp3.1\*.exe Amatsukaze_pack\exe_files /Y
          xcopy Amatsukaze\AmatsukazeGUI\bin\Release\netcoreapp3.1\AmatsukazeGUI.runtimeconfig.json Amatsukaze_pack\exe_files /Y
          xcopy Amatsukaze\AmatsukazeServer\bin\Release\netcoreapp3.1\*.dll Amatsukaze_pack\exe_files /Y
          xcopy Amatsukaze\AmatsukazeServer\bin\Release\netcoreapp3.1\*.exe Amatsukaze_pack\exe_files /Y
          xcopy Amatsukaze\AmatsukazeServer\bin\Release\netcoreapp3.1\AmatsukazeServer.runtimeconfig.json Amatsukaze_pack\exe_files /Y
          xcopy Amatsukaze\AmatsukazeServerCLI\bin\Release\netcoreapp3.1\*.dll Amatsukaze_pack\exe_files /Y
          xcopy Amatsukaze\AmatsukazeServerCLI\bin\Release\netcoreapp3.1\*.exe Amatsukaze_pack\exe_files /Y
          xcopy Amatsukaze\AmatsukazeServerCLI\bin\Release\netcoreapp3.1\AmatsukazeServerCLI.runtimeconfig.json Amatsukaze_pack\exe_files /Y
          xcopy Amatsukaze\ScriptCommand\bin\Release\netcoreapp3.1\*.dll Amatsukaze_pack\exe_files /Y
          xcopy Amatsukaze\ScriptCommand\bin\Release\netcoreapp3.1\*.exe Amatsukaze_pack\exe_files /Y
          xcopy Amatsukaze\ScriptCommand\bin\Release\netcoreapp3.1\ScriptCommand.runtimeconfig.json Amatsukaze_pack\exe_files /Y
          xcopy Amatsukaze\x64\Release\*.dll Amatsukaze_pack\exe_files /Y
          xcopy Amatsukaze\x64\Release\*.exe Amatsukaze_pack\exe_files /Y
          xcopy Amatsukaze_nicojk18\x64\Release\*.exe Amatsukaze_pack\exe_files /Y

      # ビルド成果物をアップロード
      - name: upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: Amatsukaze
          path: Amatsukaze_pack
